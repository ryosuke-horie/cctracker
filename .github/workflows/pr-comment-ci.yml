name: PR Comment CI

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  check-command:
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/ci')
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
      - name: Check if comment is /ci command
        id: check
        run: |
          if [[ "${{ github.event.comment.body }}" == "/ci" ]]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi

      - name: React to comment
        if: steps.check.outputs.should-run == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            })

  ci:
    needs: check-command
    if: needs.check-command.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Get PR information
        uses: actions/github-script@v7
        id: pr-info
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            core.setOutput('head-ref', pullRequest.head.ref);
            core.setOutput('head-sha', pullRequest.head.sha);

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr-info.outputs.head-sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        id: typecheck
        run: |
          echo "## Type Check" >> $GITHUB_STEP_SUMMARY
          if npm run typecheck; then
            echo "✅ Type check passed" >> $GITHUB_STEP_SUMMARY
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Type check failed" >> $GITHUB_STEP_SUMMARY
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Run format check
        id: format
        run: |
          echo "## Format Check" >> $GITHUB_STEP_SUMMARY
          if npm run format:check; then
            echo "✅ Format check passed" >> $GITHUB_STEP_SUMMARY
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Format check failed" >> $GITHUB_STEP_SUMMARY
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Run tests with coverage
        id: test
        run: |
          echo "## Test Coverage" >> $GITHUB_STEP_SUMMARY
          npm run test:run > coverage-output.txt 2>&1 || TEST_EXIT_CODE=$?
          
          # Display test results
          if grep -E "(Test Files|Tests)" coverage-output.txt; then
            grep -E "(Test Files|Tests)" coverage-output.txt >> $GITHUB_STEP_SUMMARY
          fi
          
          # Extract and display coverage
          if grep -A 5 "Coverage summary" coverage-output.txt; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Coverage Summary" >> $GITHUB_STEP_SUMMARY
            grep -A 5 "Coverage summary" coverage-output.txt >> $GITHUB_STEP_SUMMARY
          fi
          
          # Extract coverage percentage for statements
          COVERAGE=$(grep "All files" coverage-output.txt | awk -F'|' '{print $2}' | tr -d ' %' || echo "0")
          echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT
          
          # Check if tests passed
          if [ "${TEST_EXIT_CODE:-0}" -ne 0 ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Post results to PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const typeCheckStatus = '${{ steps.typecheck.outputs.status }}' === 'success' ? '✅' : '❌';
            const formatStatus = '${{ steps.format.outputs.status }}' === 'success' ? '✅' : '❌';
            const testStatus = '${{ steps.test.outputs.status }}' === 'success' ? '✅' : '❌';
            const coverage = '${{ steps.test.outputs.coverage }}' || 'N/A';
            
            const body = `## CI Results
            
            | Check | Status |
            |-------|--------|
            | Type Check | ${typeCheckStatus} |
            | Format | ${formatStatus} |
            | Tests | ${testStatus} |
            | Coverage | ${coverage}% |
            
            <details>
            <summary>詳細ログ</summary>
            
            [ワークフロー実行ログを確認](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            
            </details>
            
            ---
            _Triggered by @${context.actor} with \`/ci\` command_`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });